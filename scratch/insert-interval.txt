(defn insert-interval [intervals new-interval]
  (letfn [(merge-intervals [[start1 end1] [start2 end2]]
            (if (<= end1 start2)
              [[start1 end1] [start2 end2]] ; No overlap, return both intervals as is
              [[(min start1 start2) (max end1 end2)]])) ; Overlap, merge the intervals
          (insert-interval-helper [intervals new-interval acc]
            (if (empty? intervals)
              (conj acc new-interval) ; All intervals processed, insert the new interval
              (let [[curr-interval & remaining-intervals] intervals]
                (if (<= (last curr-interval) (first new-interval))
                  ; Current interval ends before the new interval starts
                  (insert-interval-helper remaining-intervals new-interval (conj acc curr-interval))
                  ; Current interval overlaps with the new interval, merge them
                  (insert-interval-helper remaining-intervals (merge-intervals curr-interval new-interval) acc)))))]
    (insert-interval-helper intervals new-interval [])))

(let [intervals [[1 3] [6 9]]
      new-interval [2 5]]
  (println (insert-interval intervals new-interval)))
